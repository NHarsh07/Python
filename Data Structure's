# Python Data Structures: List, Tuple, Set, and Dictionary

# 1. List
# A List is an ordered, mutable collection of items. Lists are used to store multiple items in a single variable.
# Lists are defined using square brackets [] and can contain elements of different types (e.g., numbers, strings, etc.).
# Lists are mutable, which means that you can change their contents after creation (adding, modifying, removing items).

# Example: Creating a List
fruits = ["apple", "banana", "cherry"]

# Accessing elements by index
print("First fruit:", fruits[0])   # Output: apple

# Modifying elements
fruits[1] = "blueberry"
print("Modified list:", fruits)    # Output: ['apple', 'blueberry', 'cherry']

# Adding elements to the list using append
fruits.append("orange")
print("After appending orange:", fruits)  # Output: ['apple', 'blueberry', 'cherry', 'orange']

# Removing elements from the list
fruits.remove("cherry")
print("After removing cherry:", fruits)  # Output: ['apple', 'blueberry', 'orange']

# List methods allow us to perform operations like sorting and reversing
print("Sorted list:", sorted(fruits))  # Temporary sorting: Output: ['apple', 'blueberry', 'orange']
fruits.reverse()
print("Reversed list:", fruits)        # Output: ['orange', 'blueberry', 'apple']

# 2. Tuple
# A Tuple is an ordered, immutable collection of items. Once created, the elements of a tuple cannot be changed.
# Tuples are defined using parentheses () and are used when you want a sequence of elements that should not be modified.
# Since tuples are immutable, they can be more efficient than lists in certain cases.

# Example: Creating a Tuple
person = ("John", 25, "New York")

# Accessing elements in a tuple by index
print("Person name:", person[0])   # Output: John

# Tuples are immutable, so you cannot change their elements directly
# person[1] = 30  # This would raise an error

# However, you can concatenate or slice them to create new tuples
new_person = person + ("Engineer",)
print("Extended tuple:", new_person)  # Output: ('John', 25, 'New York', 'Engineer')

# Tuple methods include count() and index()
print("Index of 'New York':", person.index("New York"))  # Output: 2

# 3. Set
# A Set is an unordered, mutable collection of unique items. Sets are defined using curly braces {}.
# Since sets are unordered, they do not allow indexing, and duplicate elements are automatically removed.
# Sets are useful when you want to store a collection of unique items and perform mathematical set operations like union, intersection, etc.

# Example: Creating a Set
colors = {"red", "green", "blue"}

# Adding elements to the set
colors.add("yellow")
print("Set after adding yellow:", colors)  # Output: {'red', 'green', 'blue', 'yellow'}

# Removing elements from the set
colors.remove("green")
print("Set after removing green:", colors)  # Output: {'red', 'blue', 'yellow'}

# Adding a duplicate element has no effect (because sets do not allow duplicates)
colors.add("red")
print("Set after trying to add red again:", colors)  # Output: {'red', 'blue', 'yellow'}

# Set operations: union, intersection
colors2 = {"purple", "blue", "pink"}
print("Union of sets:", colors.union(colors2))         # Output: {'red', 'blue', 'yellow', 'purple', 'pink'}
print("Intersection of sets:", colors.intersection(colors2))  # Output: {'blue'}

# 4. Dictionary
# A Dictionary is an unordered collection of key-value pairs. Each key in a dictionary is unique, and the values can be accessed via their corresponding keys.
# Dictionaries are defined using curly braces {}, with each key-value pair separated by a colon (:).
# Dictionaries are mutable, which means that you can change their contents (add, modify, remove key-value pairs).

# Example: Creating a Dictionary
student = {
    "name": "Alice",
    "age": 22,
    "major": "Computer Science"
}

# Accessing values using keys
print("Student name:", student["name"])   # Output: Alice

# Modifying values in the dictionary
student["age"] = 23
print("Updated student dictionary:", student)  # Output: {'name': 'Alice', 'age': 23, 'major': 'Computer Science'}

# Adding new key-value pairs to the dictionary
student["graduation_year"] = 2025
print("After adding graduation year:", student)  # Output: {'name': 'Alice', 'age': 23, 'major': 'Computer Science', 'graduation_year': 2025}

# Removing key-value pairs from the dictionary
del student["major"]
print("After removing major:", student)   # Output: {'name': 'Alice', 'age': 23, 'graduation_year': 2025}

# Dictionary methods include keys(), values(), and items() for working with the keys, values, and key-value pairs
print("All keys:", student.keys())    # Output: dict_keys(['name', 'age', 'graduation_year'])
print("All values:", student.values())  # Output: dict_values(['Alice', 23, 2025])

# Complete Dictionary example
print("Complete Dictionary:", student)
