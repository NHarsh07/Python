# Python Data Structures: List, Tuple, Set, and Dictionary

# 1. List
# A List is an ordered, mutable collection of items. Lists are used to store multiple items in a single variable.
# Lists are defined using square brackets [] and can contain elements of different types (e.g., numbers, strings, etc.).
# Lists are mutable, which means that you can change their contents after creation (adding, modifying, removing items).

# Example: Creating a List
fruits = ["apple", "banana", "cherry"]

# Accessing elements by index
print("First fruit:", fruits[0])   # Output: apple

# Modifying elements
fruits[1] = "blueberry"
print("Modified list:", fruits)    # Output: ['apple', 'blueberry', 'cherry']

# Adding elements to the list using append
fruits.append("orange")
print("After appending orange:", fruits)  # Output: ['apple', 'blueberry', 'cherry', 'orange']

# Removing elements from the list
fruits.remove("cherry")
print("After removing cherry:", fruits)  # Output: ['apple', 'blueberry', 'orange']

# List methods allow us to perform operations like sorting and reversing
print("Sorted list:", sorted(fruits))  # Temporary sorting: Output: ['apple', 'blueberry', 'orange']
fruits.reverse()
print("Reversed list:", fruits)        # Output: ['orange', 'blueberry', 'apple']

# 2. Tuple
# A Tuple is an ordered, immutable collection of items. Once created, the elements of a tuple cannot be changed.
# Tuples are defined using parentheses () and are used when you want a sequence of elements that should not be modified.
# Since tuples are immutable, they can be more efficient than lists in certain cases.

# Example: Creating a Tuple
person = ("John", 25, "New York")

# Accessing elements in a tuple by index
print("Person name:", person[0])   # Output: John

# Tuples are immutable, so you cannot change their elements directly
# person[1] = 30  # This would raise an error

# However, you can concatenate or slice them to create new tuples
new_person = person + ("Engineer",)
print("Extended tuple:", new_person)  # Output: ('John', 25, 'New York', 'Engineer')

# Tuple methods include count() and index()
print("Index of 'New York':", person.index("New York"))  # Output: 2
